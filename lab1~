#lang racket

(define salutation (list-ref '("Hi" "Hello") (random 2)))

(define (greet name)
  (string-append salutation ", " name))
 
(greet "John")

(define (new.< x y)
  (if (and ( > x y ) (< y x))
  #f
  #t))

(define (new.> x y)
  (if (and ( > x y ) (< y x))
  #t
  #f))

(define (new.= x y)
  (if (= x y)
      #t
      #f))

(define (new.>= x y)
  (if ( >= x y )
  #t
  #f))

(define (new.<= x y)
  (if ( <= x y )
  #t
  #f))

(define (new.<> x y)
  (if (not (= x y))
      #t
      #f))

;3
(define (nwd a b)
  (if (> b 0)
      (nwd b (modulo a b))
       a))

(define (nww a b)
  (/ (* a b) (nwd a b)))


(define (funkcja operator a b)
  (if (operator a b)
  #t
  #f))

;4
(define (same-values? p1 p2 x y)
  (if (and (p1 x y) (p2 x y))
      #t
      #f))

;5
(define (odd? n)
  (if (zero? (modulo n 2))
      #f
      #t))

(define (even? n)
  (if (zero? (modulo n 2))
      #t
      #f))

;6
(define (factorialhelp n acc)
  (if (> n 0)
      (factorialhelp (- n 1) (* acc n))
      acc
      ))

(define (factorial n)
  (factorialhelp n 1))

(define (factorialdef n [acc 1])
  (if (> n 0)
      (factorialdef (- n 1) (* acc n))
      acc
      ))

;7
(define (fibonacci n)
  (if (<= n 1)
      n
      (+ (fibonacci (- n 1)) (fibonacci (- n 2)))
      ))

(define (fib-tr n)
  (define (fib-helper n-minus-1 n-minus-2 acc)
    (if (= acc n) 
        (+ n-minus-1 n-minus-2)
        (fib-helper (+ n-minus-1 n-minus-2) 
                    n-minus-1 
                    (+ 1 acc))))
  (if (< n 3) 1 (fib-helper 1 1 3)
      ))

;8 algorytm szybkiego potegowania
;exponentiation by squaring
(define (exp b e)
  (cond)
  [(= n 0) (1)]
  [()]
  [()])


(new.< 5 3)
(new.> 5 3)
(new.= 5 3)
(new.= 5 5)
(new.= 5 5)
"asdsa"
(new.>= 5 6)
(new.>= 5 5)
(new.>= 5 3)
"sadasd"
(new.<= 5 6)
(new.<= 5 5)
(new.<= 5 3)
"asdads"
(new.<> 5 5)
(new.<> 5 4)
(nwd 100 25)
"safsaffsa"
(funkcja = 3 5)
(funkcja = 5 5)
"saffsafsagfsagsa"
(same-values? = new.= 3 1)
(same-values? = new.= 3 3)
(same-values? < > 2 3)
(same-values? + * 2 2)
(same-values? = = 3 5)
"odds"
(odd? 4)
(odd? 5)
(even? 4)
(even? 5)
"factorial"
(factorial 0)
(factorial 1)
(factorial 2)
(factorial 3)
(factorial 4)
(factorial 5)
(factorial 6)
(factorialdef 5)
"fibo"
(for/list ([i 11])
  (fib-tr i))

